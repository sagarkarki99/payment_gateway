{
    "consumes": [
        "application/json",
        "application/xml"
    ],
    "produces": [
        "application/json",
        "application/xml"
    ],
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "A payment gateway service that handles deposits and withdrawals with idempotency support",
        "title": "Payment Gateway API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8000",
    "basePath": "/",
    "paths": {
        "/deposit": {
            "post": {
                "description": "Process a deposit request with idempotency support",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Initiate a deposit",
                "parameters": [
                    {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "Unique key for request idempotency (UUID format)",
                        "name": "Idempotency-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Deposit request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deposit initiated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.PaymentResult"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters or validation error",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    },
                    "422": {
                        "description": "Payment processing failed",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    },
                    "502": {
                        "description": "Payment gateway error",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    }
                }
            }
        },
        "/payment-callback": {
            "post": {
                "description": "Process callback notifications from payment gateways",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "Callbacks"
                ],
                "summary": "Handle payment gateway callback",
                "parameters": [
                    {
                        "description": "Callback notification details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PaymentCallback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Callback processed successfully",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid callback data or validation error",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    },
                    "404": {
                        "description": "Transaction not found",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    }
                }
            }
        },
        "/withdraw": {
            "post": {
                "description": "Process a withdrawal request with idempotency support",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Initiate a withdrawal",
                "parameters": [
                    {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "Unique key for request idempotency (UUID format)",
                        "name": "Idempotency-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Withdrawal request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Withdrawal initiated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.PaymentResult"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters or validation error",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    },
                    "422": {
                        "description": "Insufficient funds or payment processing failed",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.APIError": {
            "description": "Error response model",
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message\nrequired: true",
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "status_code": {
                    "description": "HTTP status code\nrequired: true",
                    "type": "integer",
                    "example": 400
                }
            }
        },
        "models.APIResponse": {
            "description": "Successful API response model",
            "type": "object",
            "properties": {
                "data": {
                    "description": "Response data (only present in successful responses)\nrequired: false"
                },
                "message": {
                    "description": "Response message\nrequired: true",
                    "type": "string",
                    "example": "Operation successful"
                },
                "status_code": {
                    "description": "HTTP status code\nrequired: true",
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.PaymentCallback": {
            "description": "Payment gateway callback model",
            "type": "object",
            "properties": {
                "error_message": {
                    "description": "Optional error message\nrequired: false",
                    "type": "string",
                    "example": "Transaction proceeded successfully."
                },
                "gateway_txn_id": {
                    "description": "Transaction identifier\nrequired: true",
                    "type": "string",
                    "example": "123456"
                },
                "status": {
                    "description": "Transaction status\nrequired: true",
                    "type": "string",
                    "example": "completed"
                }
            }
        },
        "models.PaymentResult": {
            "description": "Payment transaction result model",
            "type": "object",
            "properties": {
                "transaction_id": {
                    "description": "Transaction identifier\nrequired: true",
                    "type": "integer",
                    "example": 123456
                }
            }
        },
        "models.TransactionRequest": {
            "description": "Transaction request model",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount to process\nrequired: true",
                    "type": "number",
                    "example": 99.99
                },
                "country_id": {
                    "description": "Country identifier (ISO 3166-1 numeric)\nrequired: true",
                    "type": "integer",
                    "example": 840
                },
                "currency": {
                    "description": "Currency code in ISO 4217 format\nrequired: true",
                    "type": "string",
                    "example": "USD"
                },
                "gateway_id": {
                    "description": "Payment gateway identifier\nrequired: true",
                    "type": "integer",
                    "example": 112
                }
            }
        }
    }
}